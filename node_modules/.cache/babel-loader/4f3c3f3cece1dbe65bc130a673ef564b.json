{"ast":null,"code":"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport DOM from 'react-dom';\nvar commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction unwrapExports(x) {\n  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x.default : x;\n}\n\nfunction createCommonjsModule(fn, module) {\n  return module = {\n    exports: {}\n  }, fn(module, module.exports), module.exports;\n}\n\nvar mapToZero_1 = createCommonjsModule(function (module, exports) {\n  exports.__esModule = true;\n  exports['default'] = mapToZero;\n\n  function mapToZero(obj) {\n    var ret = {};\n\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        ret[key] = 0;\n      }\n    }\n\n    return ret;\n  }\n\n  module.exports = exports['default'];\n});\nunwrapExports(mapToZero_1);\nvar stripStyle_1 = createCommonjsModule(function (module, exports) {\n  exports.__esModule = true;\n  exports['default'] = stripStyle;\n\n  function stripStyle(style) {\n    var ret = {};\n\n    for (var key in style) {\n      if (!Object.prototype.hasOwnProperty.call(style, key)) {\n        continue;\n      }\n\n      ret[key] = typeof style[key] === 'number' ? style[key] : style[key].val;\n    }\n\n    return ret;\n  }\n\n  module.exports = exports['default'];\n});\nunwrapExports(stripStyle_1);\nvar stepper_1 = createCommonjsModule(function (module, exports) {\n  exports.__esModule = true;\n  exports[\"default\"] = stepper;\n  var reusedTuple = [0, 0];\n\n  function stepper(secondPerFrame, x, v, destX, k, b, precision) {\n    // Spring stiffness, in kg / s^2\n    // for animations, destX is really spring length (spring at rest). initial\n    // position is considered as the stretched/compressed position of a spring\n    var Fspring = -k * (x - destX); // Damping, in kg / s\n\n    var Fdamper = -b * v; // usually we put mass here, but for animation purposes, specifying mass is a\n    // bit redundant. you could simply adjust k and b accordingly\n    // let a = (Fspring + Fdamper) / mass;\n\n    var a = Fspring + Fdamper;\n    var newV = v + a * secondPerFrame;\n    var newX = x + newV * secondPerFrame;\n\n    if (Math.abs(newV) < precision && Math.abs(newX - destX) < precision) {\n      reusedTuple[0] = destX;\n      reusedTuple[1] = 0;\n      return reusedTuple;\n    }\n\n    reusedTuple[0] = newX;\n    reusedTuple[1] = newV;\n    return reusedTuple;\n  }\n\n  module.exports = exports[\"default\"]; // array reference around.\n});\nunwrapExports(stepper_1);\nvar performanceNow = createCommonjsModule(function (module) {\n  // Generated by CoffeeScript 1.7.1\n  (function () {\n    var getNanoSeconds, hrtime, loadTime;\n\n    if (typeof performance !== \"undefined\" && performance !== null && performance.now) {\n      module.exports = function () {\n        return performance.now();\n      };\n    } else if (typeof process !== \"undefined\" && process !== null && process.hrtime) {\n      module.exports = function () {\n        return (getNanoSeconds() - loadTime) / 1e6;\n      };\n\n      hrtime = process.hrtime;\n\n      getNanoSeconds = function getNanoSeconds() {\n        var hr;\n        hr = hrtime();\n        return hr[0] * 1e9 + hr[1];\n      };\n\n      loadTime = getNanoSeconds();\n    } else if (Date.now) {\n      module.exports = function () {\n        return Date.now() - loadTime;\n      };\n\n      loadTime = Date.now();\n    } else {\n      module.exports = function () {\n        return new Date().getTime() - loadTime;\n      };\n\n      loadTime = new Date().getTime();\n    }\n  }).call(commonjsGlobal);\n});\nvar performanceNow$1 = createCommonjsModule(function (module) {\n  // Generated by CoffeeScript 1.12.2\n  (function () {\n    var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;\n\n    if (typeof performance !== \"undefined\" && performance !== null && performance.now) {\n      module.exports = function () {\n        return performance.now();\n      };\n    } else if (typeof process !== \"undefined\" && process !== null && process.hrtime) {\n      module.exports = function () {\n        return (getNanoSeconds() - nodeLoadTime) / 1e6;\n      };\n\n      hrtime = process.hrtime;\n\n      getNanoSeconds = function getNanoSeconds() {\n        var hr;\n        hr = hrtime();\n        return hr[0] * 1e9 + hr[1];\n      };\n\n      moduleLoadTime = getNanoSeconds();\n      upTime = process.uptime() * 1e9;\n      nodeLoadTime = moduleLoadTime - upTime;\n    } else if (Date.now) {\n      module.exports = function () {\n        return Date.now() - loadTime;\n      };\n\n      loadTime = Date.now();\n    } else {\n      module.exports = function () {\n        return new Date().getTime() - loadTime;\n      };\n\n      loadTime = new Date().getTime();\n    }\n  }).call(commonjsGlobal);\n});\nvar root = typeof window === 'undefined' ? commonjsGlobal : window,\n    vendors = ['moz', 'webkit'],\n    suffix = 'AnimationFrame',\n    raf = root['request' + suffix],\n    caf = root['cancel' + suffix] || root['cancelRequest' + suffix];\n\nfor (var i = 0; !raf && i < vendors.length; i++) {\n  raf = root[vendors[i] + 'Request' + suffix];\n  caf = root[vendors[i] + 'Cancel' + suffix] || root[vendors[i] + 'CancelRequest' + suffix];\n} // Some versions of FF have rAF but not cAF\n\n\nif (!raf || !caf) {\n  var last = 0,\n      id = 0,\n      queue = [],\n      frameDuration = 1000 / 60;\n\n  raf = function raf(callback) {\n    if (queue.length === 0) {\n      var _now = performanceNow$1(),\n          next = Math.max(0, frameDuration - (_now - last));\n\n      last = next + _now;\n      setTimeout(function () {\n        var cp = queue.slice(0); // Clear queue here to prevent\n        // callbacks from appending listeners\n        // to the current frame's queue\n\n        queue.length = 0;\n\n        for (var i = 0; i < cp.length; i++) {\n          if (!cp[i].cancelled) {\n            try {\n              cp[i].callback(last);\n            } catch (e) {\n              setTimeout(function () {\n                throw e;\n              }, 0);\n            }\n          }\n        }\n      }, Math.round(next));\n    }\n\n    queue.push({\n      handle: ++id,\n      callback: callback,\n      cancelled: false\n    });\n    return id;\n  };\n\n  caf = function caf(handle) {\n    for (var i = 0; i < queue.length; i++) {\n      if (queue[i].handle === handle) {\n        queue[i].cancelled = true;\n      }\n    }\n  };\n}\n\nvar raf_1 = function raf_1(fn) {\n  // Wrap in a new function to prevent\n  // `cancel` potentially being assigned\n  // to the native rAF function\n  return raf.call(root, fn);\n};\n\nvar cancel = function cancel() {\n  caf.apply(root, arguments);\n};\n\nvar polyfill = function polyfill(object) {\n  if (!object) {\n    object = root;\n  }\n\n  object.requestAnimationFrame = raf;\n  object.cancelAnimationFrame = caf;\n};\n\nraf_1.cancel = cancel;\nraf_1.polyfill = polyfill;\nvar shouldStopAnimation_1 = createCommonjsModule(function (module, exports) {\n  exports.__esModule = true;\n  exports['default'] = shouldStopAnimation;\n\n  function shouldStopAnimation(currentStyle, style, currentVelocity) {\n    for (var key in style) {\n      if (!Object.prototype.hasOwnProperty.call(style, key)) {\n        continue;\n      }\n\n      if (currentVelocity[key] !== 0) {\n        return false;\n      }\n\n      var styleValue = typeof style[key] === 'number' ? style[key] : style[key].val; // stepper will have already taken care of rounding precision errors, so\n      // won't have such thing as 0.9999 !=== 1\n\n      if (currentStyle[key] !== styleValue) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  module.exports = exports['default'];\n});\nunwrapExports(shouldStopAnimation_1);\nvar Motion_1 = createCommonjsModule(function (module, exports) {\n  exports.__esModule = true;\n\n  var _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if ('value' in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      'default': obj\n    };\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError('Cannot call a class as a function');\n    }\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== 'function' && superClass !== null) {\n      throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n\n  var _mapToZero2 = _interopRequireDefault(mapToZero_1);\n\n  var _stripStyle2 = _interopRequireDefault(stripStyle_1);\n\n  var _stepper4 = _interopRequireDefault(stepper_1);\n\n  var _performanceNow2 = _interopRequireDefault(performanceNow);\n\n  var _raf2 = _interopRequireDefault(raf_1);\n\n  var _shouldStopAnimation2 = _interopRequireDefault(shouldStopAnimation_1);\n\n  var _react2 = _interopRequireDefault(React);\n\n  var _propTypes2 = _interopRequireDefault(PropTypes);\n\n  var msPerFrame = 1000 / 60;\n\n  var Motion = function (_React$Component) {\n    _inherits(Motion, _React$Component);\n\n    _createClass(Motion, null, [{\n      key: 'propTypes',\n      value: {\n        // TOOD: warn against putting a config in here\n        defaultStyle: _propTypes2['default'].objectOf(_propTypes2['default'].number),\n        style: _propTypes2['default'].objectOf(_propTypes2['default'].oneOfType([_propTypes2['default'].number, _propTypes2['default'].object])).isRequired,\n        children: _propTypes2['default'].func.isRequired,\n        onRest: _propTypes2['default'].func\n      },\n      enumerable: true\n    }]);\n\n    function Motion(props) {\n      var _this = this;\n\n      _classCallCheck(this, Motion);\n\n      _React$Component.call(this, props);\n\n      this.wasAnimating = false;\n      this.animationID = null;\n      this.prevTime = 0;\n      this.accumulatedTime = 0;\n      this.unreadPropStyle = null;\n\n      this.clearUnreadPropStyle = function (destStyle) {\n        var dirty = false;\n        var _state = _this.state;\n        var currentStyle = _state.currentStyle;\n        var currentVelocity = _state.currentVelocity;\n        var lastIdealStyle = _state.lastIdealStyle;\n        var lastIdealVelocity = _state.lastIdealVelocity;\n\n        for (var key in destStyle) {\n          if (!Object.prototype.hasOwnProperty.call(destStyle, key)) {\n            continue;\n          }\n\n          var styleValue = destStyle[key];\n\n          if (typeof styleValue === 'number') {\n            if (!dirty) {\n              dirty = true;\n              currentStyle = _extends({}, currentStyle);\n              currentVelocity = _extends({}, currentVelocity);\n              lastIdealStyle = _extends({}, lastIdealStyle);\n              lastIdealVelocity = _extends({}, lastIdealVelocity);\n            }\n\n            currentStyle[key] = styleValue;\n            currentVelocity[key] = 0;\n            lastIdealStyle[key] = styleValue;\n            lastIdealVelocity[key] = 0;\n          }\n        }\n\n        if (dirty) {\n          _this.setState({\n            currentStyle: currentStyle,\n            currentVelocity: currentVelocity,\n            lastIdealStyle: lastIdealStyle,\n            lastIdealVelocity: lastIdealVelocity\n          });\n        }\n      };\n\n      this.startAnimationIfNecessary = function () {\n        // TODO: when config is {a: 10} and dest is {a: 10} do we raf once and\n        // call cb? No, otherwise accidental parent rerender causes cb trigger\n        _this.animationID = _raf2['default'](function (timestamp) {\n          // check if we need to animate in the first place\n          var propsStyle = _this.props.style;\n\n          if (_shouldStopAnimation2['default'](_this.state.currentStyle, propsStyle, _this.state.currentVelocity)) {\n            if (_this.wasAnimating && _this.props.onRest) {\n              _this.props.onRest();\n            } // no need to cancel animationID here; shouldn't have any in flight\n\n\n            _this.animationID = null;\n            _this.wasAnimating = false;\n            _this.accumulatedTime = 0;\n            return;\n          }\n\n          _this.wasAnimating = true;\n\n          var currentTime = timestamp || _performanceNow2['default']();\n\n          var timeDelta = currentTime - _this.prevTime;\n          _this.prevTime = currentTime;\n          _this.accumulatedTime = _this.accumulatedTime + timeDelta; // more than 10 frames? prolly switched browser tab. Restart\n\n          if (_this.accumulatedTime > msPerFrame * 10) {\n            _this.accumulatedTime = 0;\n          }\n\n          if (_this.accumulatedTime === 0) {\n            // no need to cancel animationID here; shouldn't have any in flight\n            _this.animationID = null;\n\n            _this.startAnimationIfNecessary();\n\n            return;\n          }\n\n          var currentFrameCompletion = (_this.accumulatedTime - Math.floor(_this.accumulatedTime / msPerFrame) * msPerFrame) / msPerFrame;\n          var framesToCatchUp = Math.floor(_this.accumulatedTime / msPerFrame);\n          var newLastIdealStyle = {};\n          var newLastIdealVelocity = {};\n          var newCurrentStyle = {};\n          var newCurrentVelocity = {};\n\n          for (var key in propsStyle) {\n            if (!Object.prototype.hasOwnProperty.call(propsStyle, key)) {\n              continue;\n            }\n\n            var styleValue = propsStyle[key];\n\n            if (typeof styleValue === 'number') {\n              newCurrentStyle[key] = styleValue;\n              newCurrentVelocity[key] = 0;\n              newLastIdealStyle[key] = styleValue;\n              newLastIdealVelocity[key] = 0;\n            } else {\n              var newLastIdealStyleValue = _this.state.lastIdealStyle[key];\n              var newLastIdealVelocityValue = _this.state.lastIdealVelocity[key];\n\n              for (var i = 0; i < framesToCatchUp; i++) {\n                var _stepper = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);\n\n                newLastIdealStyleValue = _stepper[0];\n                newLastIdealVelocityValue = _stepper[1];\n              }\n\n              var _stepper2 = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);\n\n              var nextIdealX = _stepper2[0];\n              var nextIdealV = _stepper2[1];\n              newCurrentStyle[key] = newLastIdealStyleValue + (nextIdealX - newLastIdealStyleValue) * currentFrameCompletion;\n              newCurrentVelocity[key] = newLastIdealVelocityValue + (nextIdealV - newLastIdealVelocityValue) * currentFrameCompletion;\n              newLastIdealStyle[key] = newLastIdealStyleValue;\n              newLastIdealVelocity[key] = newLastIdealVelocityValue;\n            }\n          }\n\n          _this.animationID = null; // the amount we're looped over above\n\n          _this.accumulatedTime -= framesToCatchUp * msPerFrame;\n\n          _this.setState({\n            currentStyle: newCurrentStyle,\n            currentVelocity: newCurrentVelocity,\n            lastIdealStyle: newLastIdealStyle,\n            lastIdealVelocity: newLastIdealVelocity\n          });\n\n          _this.unreadPropStyle = null;\n\n          _this.startAnimationIfNecessary();\n        });\n      };\n\n      this.state = this.defaultState();\n    }\n\n    Motion.prototype.defaultState = function defaultState() {\n      var _props = this.props;\n      var defaultStyle = _props.defaultStyle;\n      var style = _props.style;\n\n      var currentStyle = defaultStyle || _stripStyle2['default'](style);\n\n      var currentVelocity = _mapToZero2['default'](currentStyle);\n\n      return {\n        currentStyle: currentStyle,\n        currentVelocity: currentVelocity,\n        lastIdealStyle: currentStyle,\n        lastIdealVelocity: currentVelocity\n      };\n    }; // it's possible that currentStyle's value is stale: if props is immediately\n    // changed from 0 to 400 to spring(0) again, the async currentStyle is still\n    // at 0 (didn't have time to tick and interpolate even once). If we naively\n    // compare currentStyle with destVal it'll be 0 === 0 (no animation, stop).\n    // In reality currentStyle should be 400\n\n\n    Motion.prototype.componentDidMount = function componentDidMount() {\n      this.prevTime = _performanceNow2['default']();\n      this.startAnimationIfNecessary();\n    };\n\n    Motion.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {\n      if (this.unreadPropStyle != null) {\n        // previous props haven't had the chance to be set yet; set them here\n        this.clearUnreadPropStyle(this.unreadPropStyle);\n      }\n\n      this.unreadPropStyle = props.style;\n\n      if (this.animationID == null) {\n        this.prevTime = _performanceNow2['default']();\n        this.startAnimationIfNecessary();\n      }\n    };\n\n    Motion.prototype.componentWillUnmount = function componentWillUnmount() {\n      if (this.animationID != null) {\n        _raf2['default'].cancel(this.animationID);\n\n        this.animationID = null;\n      }\n    };\n\n    Motion.prototype.render = function render() {\n      var renderedChildren = this.props.children(this.state.currentStyle);\n      return renderedChildren && _react2['default'].Children.only(renderedChildren);\n    };\n\n    return Motion;\n  }(_react2['default'].Component);\n\n  exports['default'] = Motion;\n  module.exports = exports['default']; // after checking for unreadPropStyle != null, we manually go set the\n  // non-interpolating values (those that are a number, without a spring\n  // config)\n});\nunwrapExports(Motion_1);\nvar StaggeredMotion_1 = createCommonjsModule(function (module, exports) {\n  exports.__esModule = true;\n\n  var _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if ('value' in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      'default': obj\n    };\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError('Cannot call a class as a function');\n    }\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== 'function' && superClass !== null) {\n      throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n\n  var _mapToZero2 = _interopRequireDefault(mapToZero_1);\n\n  var _stripStyle2 = _interopRequireDefault(stripStyle_1);\n\n  var _stepper4 = _interopRequireDefault(stepper_1);\n\n  var _performanceNow2 = _interopRequireDefault(performanceNow);\n\n  var _raf2 = _interopRequireDefault(raf_1);\n\n  var _shouldStopAnimation2 = _interopRequireDefault(shouldStopAnimation_1);\n\n  var _react2 = _interopRequireDefault(React);\n\n  var _propTypes2 = _interopRequireDefault(PropTypes);\n\n  var msPerFrame = 1000 / 60;\n\n  function shouldStopAnimationAll(currentStyles, styles, currentVelocities) {\n    for (var i = 0; i < currentStyles.length; i++) {\n      if (!_shouldStopAnimation2['default'](currentStyles[i], styles[i], currentVelocities[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  var StaggeredMotion = function (_React$Component) {\n    _inherits(StaggeredMotion, _React$Component);\n\n    _createClass(StaggeredMotion, null, [{\n      key: 'propTypes',\n      value: {\n        // TOOD: warn against putting a config in here\n        defaultStyles: _propTypes2['default'].arrayOf(_propTypes2['default'].objectOf(_propTypes2['default'].number)),\n        styles: _propTypes2['default'].func.isRequired,\n        children: _propTypes2['default'].func.isRequired\n      },\n      enumerable: true\n    }]);\n\n    function StaggeredMotion(props) {\n      var _this = this;\n\n      _classCallCheck(this, StaggeredMotion);\n\n      _React$Component.call(this, props);\n\n      this.animationID = null;\n      this.prevTime = 0;\n      this.accumulatedTime = 0;\n      this.unreadPropStyles = null;\n\n      this.clearUnreadPropStyle = function (unreadPropStyles) {\n        var _state = _this.state;\n        var currentStyles = _state.currentStyles;\n        var currentVelocities = _state.currentVelocities;\n        var lastIdealStyles = _state.lastIdealStyles;\n        var lastIdealVelocities = _state.lastIdealVelocities;\n        var someDirty = false;\n\n        for (var i = 0; i < unreadPropStyles.length; i++) {\n          var unreadPropStyle = unreadPropStyles[i];\n          var dirty = false;\n\n          for (var key in unreadPropStyle) {\n            if (!Object.prototype.hasOwnProperty.call(unreadPropStyle, key)) {\n              continue;\n            }\n\n            var styleValue = unreadPropStyle[key];\n\n            if (typeof styleValue === 'number') {\n              if (!dirty) {\n                dirty = true;\n                someDirty = true;\n                currentStyles[i] = _extends({}, currentStyles[i]);\n                currentVelocities[i] = _extends({}, currentVelocities[i]);\n                lastIdealStyles[i] = _extends({}, lastIdealStyles[i]);\n                lastIdealVelocities[i] = _extends({}, lastIdealVelocities[i]);\n              }\n\n              currentStyles[i][key] = styleValue;\n              currentVelocities[i][key] = 0;\n              lastIdealStyles[i][key] = styleValue;\n              lastIdealVelocities[i][key] = 0;\n            }\n          }\n        }\n\n        if (someDirty) {\n          _this.setState({\n            currentStyles: currentStyles,\n            currentVelocities: currentVelocities,\n            lastIdealStyles: lastIdealStyles,\n            lastIdealVelocities: lastIdealVelocities\n          });\n        }\n      };\n\n      this.startAnimationIfNecessary = function () {\n        // TODO: when config is {a: 10} and dest is {a: 10} do we raf once and\n        // call cb? No, otherwise accidental parent rerender causes cb trigger\n        _this.animationID = _raf2['default'](function (timestamp) {\n          var destStyles = _this.props.styles(_this.state.lastIdealStyles); // check if we need to animate in the first place\n\n\n          if (shouldStopAnimationAll(_this.state.currentStyles, destStyles, _this.state.currentVelocities)) {\n            // no need to cancel animationID here; shouldn't have any in flight\n            _this.animationID = null;\n            _this.accumulatedTime = 0;\n            return;\n          }\n\n          var currentTime = timestamp || _performanceNow2['default']();\n\n          var timeDelta = currentTime - _this.prevTime;\n          _this.prevTime = currentTime;\n          _this.accumulatedTime = _this.accumulatedTime + timeDelta; // more than 10 frames? prolly switched browser tab. Restart\n\n          if (_this.accumulatedTime > msPerFrame * 10) {\n            _this.accumulatedTime = 0;\n          }\n\n          if (_this.accumulatedTime === 0) {\n            // no need to cancel animationID here; shouldn't have any in flight\n            _this.animationID = null;\n\n            _this.startAnimationIfNecessary();\n\n            return;\n          }\n\n          var currentFrameCompletion = (_this.accumulatedTime - Math.floor(_this.accumulatedTime / msPerFrame) * msPerFrame) / msPerFrame;\n          var framesToCatchUp = Math.floor(_this.accumulatedTime / msPerFrame);\n          var newLastIdealStyles = [];\n          var newLastIdealVelocities = [];\n          var newCurrentStyles = [];\n          var newCurrentVelocities = [];\n\n          for (var i = 0; i < destStyles.length; i++) {\n            var destStyle = destStyles[i];\n            var newCurrentStyle = {};\n            var newCurrentVelocity = {};\n            var newLastIdealStyle = {};\n            var newLastIdealVelocity = {};\n\n            for (var key in destStyle) {\n              if (!Object.prototype.hasOwnProperty.call(destStyle, key)) {\n                continue;\n              }\n\n              var styleValue = destStyle[key];\n\n              if (typeof styleValue === 'number') {\n                newCurrentStyle[key] = styleValue;\n                newCurrentVelocity[key] = 0;\n                newLastIdealStyle[key] = styleValue;\n                newLastIdealVelocity[key] = 0;\n              } else {\n                var newLastIdealStyleValue = _this.state.lastIdealStyles[i][key];\n                var newLastIdealVelocityValue = _this.state.lastIdealVelocities[i][key];\n\n                for (var j = 0; j < framesToCatchUp; j++) {\n                  var _stepper = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);\n\n                  newLastIdealStyleValue = _stepper[0];\n                  newLastIdealVelocityValue = _stepper[1];\n                }\n\n                var _stepper2 = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);\n\n                var nextIdealX = _stepper2[0];\n                var nextIdealV = _stepper2[1];\n                newCurrentStyle[key] = newLastIdealStyleValue + (nextIdealX - newLastIdealStyleValue) * currentFrameCompletion;\n                newCurrentVelocity[key] = newLastIdealVelocityValue + (nextIdealV - newLastIdealVelocityValue) * currentFrameCompletion;\n                newLastIdealStyle[key] = newLastIdealStyleValue;\n                newLastIdealVelocity[key] = newLastIdealVelocityValue;\n              }\n            }\n\n            newCurrentStyles[i] = newCurrentStyle;\n            newCurrentVelocities[i] = newCurrentVelocity;\n            newLastIdealStyles[i] = newLastIdealStyle;\n            newLastIdealVelocities[i] = newLastIdealVelocity;\n          }\n\n          _this.animationID = null; // the amount we're looped over above\n\n          _this.accumulatedTime -= framesToCatchUp * msPerFrame;\n\n          _this.setState({\n            currentStyles: newCurrentStyles,\n            currentVelocities: newCurrentVelocities,\n            lastIdealStyles: newLastIdealStyles,\n            lastIdealVelocities: newLastIdealVelocities\n          });\n\n          _this.unreadPropStyles = null;\n\n          _this.startAnimationIfNecessary();\n        });\n      };\n\n      this.state = this.defaultState();\n    }\n\n    StaggeredMotion.prototype.defaultState = function defaultState() {\n      var _props = this.props;\n      var defaultStyles = _props.defaultStyles;\n      var styles = _props.styles;\n      var currentStyles = defaultStyles || styles().map(_stripStyle2['default']);\n      var currentVelocities = currentStyles.map(function (currentStyle) {\n        return _mapToZero2['default'](currentStyle);\n      });\n      return {\n        currentStyles: currentStyles,\n        currentVelocities: currentVelocities,\n        lastIdealStyles: currentStyles,\n        lastIdealVelocities: currentVelocities\n      };\n    };\n\n    StaggeredMotion.prototype.componentDidMount = function componentDidMount() {\n      this.prevTime = _performanceNow2['default']();\n      this.startAnimationIfNecessary();\n    };\n\n    StaggeredMotion.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {\n      if (this.unreadPropStyles != null) {\n        // previous props haven't had the chance to be set yet; set them here\n        this.clearUnreadPropStyle(this.unreadPropStyles);\n      }\n\n      this.unreadPropStyles = props.styles(this.state.lastIdealStyles);\n\n      if (this.animationID == null) {\n        this.prevTime = _performanceNow2['default']();\n        this.startAnimationIfNecessary();\n      }\n    };\n\n    StaggeredMotion.prototype.componentWillUnmount = function componentWillUnmount() {\n      if (this.animationID != null) {\n        _raf2['default'].cancel(this.animationID);\n\n        this.animationID = null;\n      }\n    };\n\n    StaggeredMotion.prototype.render = function render() {\n      var renderedChildren = this.props.children(this.state.currentStyles);\n      return renderedChildren && _react2['default'].Children.only(renderedChildren);\n    };\n\n    return StaggeredMotion;\n  }(_react2['default'].Component);\n\n  exports['default'] = StaggeredMotion;\n  module.exports = exports['default']; // it's possible that currentStyle's value is stale: if props is immediately\n  // changed from 0 to 400 to spring(0) again, the async currentStyle is still\n  // at 0 (didn't have time to tick and interpolate even once). If we naively\n  // compare currentStyle with destVal it'll be 0 === 0 (no animation, stop).\n  // In reality currentStyle should be 400\n  // after checking for unreadPropStyles != null, we manually go set the\n  // non-interpolating values (those that are a number, without a spring\n  // config)\n});\nunwrapExports(StaggeredMotion_1);\nvar mergeDiff_1 = createCommonjsModule(function (module, exports) {\n  exports.__esModule = true;\n  exports['default'] = mergeDiff;\n\n  function mergeDiff(prev, next, onRemove) {\n    // bookkeeping for easier access of a key's index below. This is 2 allocations +\n    // potentially triggering chrome hash map mode for objs (so it might be faster\n    var prevKeyIndex = {};\n\n    for (var i = 0; i < prev.length; i++) {\n      prevKeyIndex[prev[i].key] = i;\n    }\n\n    var nextKeyIndex = {};\n\n    for (var i = 0; i < next.length; i++) {\n      nextKeyIndex[next[i].key] = i;\n    } // first, an overly elaborate way of merging prev and next, eliminating\n    // duplicates (in terms of keys). If there's dupe, keep the item in next).\n    // This way of writing it saves allocations\n\n\n    var ret = [];\n\n    for (var i = 0; i < next.length; i++) {\n      ret[i] = next[i];\n    }\n\n    for (var i = 0; i < prev.length; i++) {\n      if (!Object.prototype.hasOwnProperty.call(nextKeyIndex, prev[i].key)) {\n        // this is called my TM's `mergeAndSync`, which calls willLeave. We don't\n        // merge in keys that the user desires to kill\n        var fill = onRemove(i, prev[i]);\n\n        if (fill != null) {\n          ret.push(fill);\n        }\n      }\n    } // now all the items all present. Core sorting logic to have the right order\n\n\n    return ret.sort(function (a, b) {\n      var nextOrderA = nextKeyIndex[a.key];\n      var nextOrderB = nextKeyIndex[b.key];\n      var prevOrderA = prevKeyIndex[a.key];\n      var prevOrderB = prevKeyIndex[b.key];\n\n      if (nextOrderA != null && nextOrderB != null) {\n        // both keys in next\n        return nextKeyIndex[a.key] - nextKeyIndex[b.key];\n      } else if (prevOrderA != null && prevOrderB != null) {\n        // both keys in prev\n        return prevKeyIndex[a.key] - prevKeyIndex[b.key];\n      } else if (nextOrderA != null) {\n        // key a in next, key b in prev\n        // how to determine the order between a and b? We find a \"pivot\" (term\n        // abuse), a key present in both prev and next, that is sandwiched between\n        // a and b. In the context of our above example, if we're comparing a and\n        // d, b's (the only) pivot\n        for (var i = 0; i < next.length; i++) {\n          var pivot = next[i].key;\n\n          if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, pivot)) {\n            continue;\n          }\n\n          if (nextOrderA < nextKeyIndex[pivot] && prevOrderB > prevKeyIndex[pivot]) {\n            return -1;\n          } else if (nextOrderA > nextKeyIndex[pivot] && prevOrderB < prevKeyIndex[pivot]) {\n            return 1;\n          }\n        } // pluggable. default to: next bigger than prev\n\n\n        return 1;\n      } // prevOrderA, nextOrderB\n\n\n      for (var i = 0; i < next.length; i++) {\n        var pivot = next[i].key;\n\n        if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, pivot)) {\n          continue;\n        }\n\n        if (nextOrderB < nextKeyIndex[pivot] && prevOrderA > prevKeyIndex[pivot]) {\n          return 1;\n        } else if (nextOrderB > nextKeyIndex[pivot] && prevOrderA < prevKeyIndex[pivot]) {\n          return -1;\n        }\n      } // pluggable. default to: next bigger than prev\n\n\n      return -1;\n    });\n  }\n\n  module.exports = exports['default']; // to loop through and find a key's index each time), but I no longer care\n});\nunwrapExports(mergeDiff_1);\nvar TransitionMotion_1 = createCommonjsModule(function (module, exports) {\n  exports.__esModule = true;\n\n  var _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if ('value' in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      'default': obj\n    };\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError('Cannot call a class as a function');\n    }\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== 'function' && superClass !== null) {\n      throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n\n  var _mapToZero2 = _interopRequireDefault(mapToZero_1);\n\n  var _stripStyle2 = _interopRequireDefault(stripStyle_1);\n\n  var _stepper4 = _interopRequireDefault(stepper_1);\n\n  var _mergeDiff2 = _interopRequireDefault(mergeDiff_1);\n\n  var _performanceNow2 = _interopRequireDefault(performanceNow);\n\n  var _raf2 = _interopRequireDefault(raf_1);\n\n  var _shouldStopAnimation2 = _interopRequireDefault(shouldStopAnimation_1);\n\n  var _react2 = _interopRequireDefault(React);\n\n  var _propTypes2 = _interopRequireDefault(PropTypes);\n\n  var msPerFrame = 1000 / 60; // the children function & (potential) styles function asks as param an\n  // Array<TransitionPlainStyle>, where each TransitionPlainStyle is of the format\n  // {key: string, data?: any, style: PlainStyle}. However, the way we keep\n  // internal states doesn't contain such a data structure (check the state and\n  // TransitionMotionState). So when children function and others ask for such\n  // data we need to generate them on the fly by combining mergedPropsStyles and\n  // currentStyles/lastIdealStyles\n\n  function rehydrateStyles(mergedPropsStyles, unreadPropStyles, plainStyles) {\n    // Copy the value to a `const` so that Flow understands that the const won't\n    // change and will be non-nullable in the callback below.\n    var cUnreadPropStyles = unreadPropStyles;\n\n    if (cUnreadPropStyles == null) {\n      return mergedPropsStyles.map(function (mergedPropsStyle, i) {\n        return {\n          key: mergedPropsStyle.key,\n          data: mergedPropsStyle.data,\n          style: plainStyles[i]\n        };\n      });\n    }\n\n    return mergedPropsStyles.map(function (mergedPropsStyle, i) {\n      for (var j = 0; j < cUnreadPropStyles.length; j++) {\n        if (cUnreadPropStyles[j].key === mergedPropsStyle.key) {\n          return {\n            key: cUnreadPropStyles[j].key,\n            data: cUnreadPropStyles[j].data,\n            style: plainStyles[i]\n          };\n        }\n      }\n\n      return {\n        key: mergedPropsStyle.key,\n        data: mergedPropsStyle.data,\n        style: plainStyles[i]\n      };\n    });\n  }\n\n  function shouldStopAnimationAll(currentStyles, destStyles, currentVelocities, mergedPropsStyles) {\n    if (mergedPropsStyles.length !== destStyles.length) {\n      return false;\n    }\n\n    for (var i = 0; i < mergedPropsStyles.length; i++) {\n      if (mergedPropsStyles[i].key !== destStyles[i].key) {\n        return false;\n      }\n    } // we have the invariant that mergedPropsStyles and\n    // currentStyles/currentVelocities/last* are synced in terms of cells, see\n    // mergeAndSync comment for more info\n\n\n    for (var i = 0; i < mergedPropsStyles.length; i++) {\n      if (!_shouldStopAnimation2['default'](currentStyles[i], destStyles[i].style, currentVelocities[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  } // core key merging logic\n  // things to do: say previously merged style is {a, b}, dest style (prop) is {b,\n  // c}, previous current (interpolating) style is {a, b}\n  // **invariant**: current[i] corresponds to merged[i] in terms of key\n  // steps:\n  // turn merged style into {a?, b, c}\n  //    add c, value of c is destStyles.c\n  //    maybe remove a, aka call willLeave(a), then merged is either {b, c} or {a, b, c}\n  // turn current (interpolating) style from {a, b} into {a?, b, c}\n  //    maybe remove a\n  //    certainly add c, value of c is willEnter(c)\n  // loop over merged and construct new current\n  // dest doesn't change, that's owner's\n\n\n  function mergeAndSync(willEnter, willLeave, didLeave, oldMergedPropsStyles, destStyles, oldCurrentStyles, oldCurrentVelocities, oldLastIdealStyles, oldLastIdealVelocities) {\n    var newMergedPropsStyles = _mergeDiff2['default'](oldMergedPropsStyles, destStyles, function (oldIndex, oldMergedPropsStyle) {\n      var leavingStyle = willLeave(oldMergedPropsStyle);\n\n      if (leavingStyle == null) {\n        didLeave({\n          key: oldMergedPropsStyle.key,\n          data: oldMergedPropsStyle.data\n        });\n        return null;\n      }\n\n      if (_shouldStopAnimation2['default'](oldCurrentStyles[oldIndex], leavingStyle, oldCurrentVelocities[oldIndex])) {\n        didLeave({\n          key: oldMergedPropsStyle.key,\n          data: oldMergedPropsStyle.data\n        });\n        return null;\n      }\n\n      return {\n        key: oldMergedPropsStyle.key,\n        data: oldMergedPropsStyle.data,\n        style: leavingStyle\n      };\n    });\n\n    var newCurrentStyles = [];\n    var newCurrentVelocities = [];\n    var newLastIdealStyles = [];\n    var newLastIdealVelocities = [];\n\n    for (var i = 0; i < newMergedPropsStyles.length; i++) {\n      var newMergedPropsStyleCell = newMergedPropsStyles[i];\n      var foundOldIndex = null;\n\n      for (var j = 0; j < oldMergedPropsStyles.length; j++) {\n        if (oldMergedPropsStyles[j].key === newMergedPropsStyleCell.key) {\n          foundOldIndex = j;\n          break;\n        }\n      } // TODO: key search code\n\n\n      if (foundOldIndex == null) {\n        var plainStyle = willEnter(newMergedPropsStyleCell);\n        newCurrentStyles[i] = plainStyle;\n        newLastIdealStyles[i] = plainStyle;\n\n        var velocity = _mapToZero2['default'](newMergedPropsStyleCell.style);\n\n        newCurrentVelocities[i] = velocity;\n        newLastIdealVelocities[i] = velocity;\n      } else {\n        newCurrentStyles[i] = oldCurrentStyles[foundOldIndex];\n        newLastIdealStyles[i] = oldLastIdealStyles[foundOldIndex];\n        newCurrentVelocities[i] = oldCurrentVelocities[foundOldIndex];\n        newLastIdealVelocities[i] = oldLastIdealVelocities[foundOldIndex];\n      }\n    }\n\n    return [newMergedPropsStyles, newCurrentStyles, newCurrentVelocities, newLastIdealStyles, newLastIdealVelocities];\n  }\n\n  var TransitionMotion = function (_React$Component) {\n    _inherits(TransitionMotion, _React$Component);\n\n    _createClass(TransitionMotion, null, [{\n      key: 'propTypes',\n      value: {\n        defaultStyles: _propTypes2['default'].arrayOf(_propTypes2['default'].shape({\n          key: _propTypes2['default'].string.isRequired,\n          data: _propTypes2['default'].any,\n          style: _propTypes2['default'].objectOf(_propTypes2['default'].number).isRequired\n        })),\n        styles: _propTypes2['default'].oneOfType([_propTypes2['default'].func, _propTypes2['default'].arrayOf(_propTypes2['default'].shape({\n          key: _propTypes2['default'].string.isRequired,\n          data: _propTypes2['default'].any,\n          style: _propTypes2['default'].objectOf(_propTypes2['default'].oneOfType([_propTypes2['default'].number, _propTypes2['default'].object])).isRequired\n        }))]).isRequired,\n        children: _propTypes2['default'].func.isRequired,\n        willEnter: _propTypes2['default'].func,\n        willLeave: _propTypes2['default'].func,\n        didLeave: _propTypes2['default'].func\n      },\n      enumerable: true\n    }, {\n      key: 'defaultProps',\n      value: {\n        willEnter: function willEnter(styleThatEntered) {\n          return _stripStyle2['default'](styleThatEntered.style);\n        },\n        // recall: returning null makes the current unmounting TransitionStyle\n        // disappear immediately\n        willLeave: function willLeave() {\n          return null;\n        },\n        didLeave: function didLeave() {}\n      },\n      enumerable: true\n    }]);\n\n    function TransitionMotion(props) {\n      var _this = this;\n\n      _classCallCheck(this, TransitionMotion);\n\n      _React$Component.call(this, props);\n\n      this.unmounting = false;\n      this.animationID = null;\n      this.prevTime = 0;\n      this.accumulatedTime = 0;\n      this.unreadPropStyles = null;\n\n      this.clearUnreadPropStyle = function (unreadPropStyles) {\n        var _mergeAndSync = mergeAndSync(_this.props.willEnter, _this.props.willLeave, _this.props.didLeave, _this.state.mergedPropsStyles, unreadPropStyles, _this.state.currentStyles, _this.state.currentVelocities, _this.state.lastIdealStyles, _this.state.lastIdealVelocities);\n\n        var mergedPropsStyles = _mergeAndSync[0];\n        var currentStyles = _mergeAndSync[1];\n        var currentVelocities = _mergeAndSync[2];\n        var lastIdealStyles = _mergeAndSync[3];\n        var lastIdealVelocities = _mergeAndSync[4];\n\n        for (var i = 0; i < unreadPropStyles.length; i++) {\n          var unreadPropStyle = unreadPropStyles[i].style;\n          var dirty = false;\n\n          for (var key in unreadPropStyle) {\n            if (!Object.prototype.hasOwnProperty.call(unreadPropStyle, key)) {\n              continue;\n            }\n\n            var styleValue = unreadPropStyle[key];\n\n            if (typeof styleValue === 'number') {\n              if (!dirty) {\n                dirty = true;\n                currentStyles[i] = _extends({}, currentStyles[i]);\n                currentVelocities[i] = _extends({}, currentVelocities[i]);\n                lastIdealStyles[i] = _extends({}, lastIdealStyles[i]);\n                lastIdealVelocities[i] = _extends({}, lastIdealVelocities[i]);\n                mergedPropsStyles[i] = {\n                  key: mergedPropsStyles[i].key,\n                  data: mergedPropsStyles[i].data,\n                  style: _extends({}, mergedPropsStyles[i].style)\n                };\n              }\n\n              currentStyles[i][key] = styleValue;\n              currentVelocities[i][key] = 0;\n              lastIdealStyles[i][key] = styleValue;\n              lastIdealVelocities[i][key] = 0;\n              mergedPropsStyles[i].style[key] = styleValue;\n            }\n          }\n        } // unlike the other 2 components, we can't detect staleness and optionally\n        // opt out of setState here. each style object's data might contain new\n        // stuff we're not/cannot compare\n\n\n        _this.setState({\n          currentStyles: currentStyles,\n          currentVelocities: currentVelocities,\n          mergedPropsStyles: mergedPropsStyles,\n          lastIdealStyles: lastIdealStyles,\n          lastIdealVelocities: lastIdealVelocities\n        });\n      };\n\n      this.startAnimationIfNecessary = function () {\n        if (_this.unmounting) {\n          return;\n        } // TODO: when config is {a: 10} and dest is {a: 10} do we raf once and\n        // call cb? No, otherwise accidental parent rerender causes cb trigger\n\n\n        _this.animationID = _raf2['default'](function (timestamp) {\n          // https://github.com/chenglou/react-motion/pull/420\n          // > if execution passes the conditional if (this.unmounting), then\n          // executes async defaultRaf and after that component unmounts and after\n          // that the callback of defaultRaf is called, then setState will be called\n          // on unmounted component.\n          if (_this.unmounting) {\n            return;\n          }\n\n          var propStyles = _this.props.styles;\n          var destStyles = typeof propStyles === 'function' ? propStyles(rehydrateStyles(_this.state.mergedPropsStyles, _this.unreadPropStyles, _this.state.lastIdealStyles)) : propStyles; // check if we need to animate in the first place\n\n          if (shouldStopAnimationAll(_this.state.currentStyles, destStyles, _this.state.currentVelocities, _this.state.mergedPropsStyles)) {\n            // no need to cancel animationID here; shouldn't have any in flight\n            _this.animationID = null;\n            _this.accumulatedTime = 0;\n            return;\n          }\n\n          var currentTime = timestamp || _performanceNow2['default']();\n\n          var timeDelta = currentTime - _this.prevTime;\n          _this.prevTime = currentTime;\n          _this.accumulatedTime = _this.accumulatedTime + timeDelta; // more than 10 frames? prolly switched browser tab. Restart\n\n          if (_this.accumulatedTime > msPerFrame * 10) {\n            _this.accumulatedTime = 0;\n          }\n\n          if (_this.accumulatedTime === 0) {\n            // no need to cancel animationID here; shouldn't have any in flight\n            _this.animationID = null;\n\n            _this.startAnimationIfNecessary();\n\n            return;\n          }\n\n          var currentFrameCompletion = (_this.accumulatedTime - Math.floor(_this.accumulatedTime / msPerFrame) * msPerFrame) / msPerFrame;\n          var framesToCatchUp = Math.floor(_this.accumulatedTime / msPerFrame);\n\n          var _mergeAndSync2 = mergeAndSync(_this.props.willEnter, _this.props.willLeave, _this.props.didLeave, _this.state.mergedPropsStyles, destStyles, _this.state.currentStyles, _this.state.currentVelocities, _this.state.lastIdealStyles, _this.state.lastIdealVelocities);\n\n          var newMergedPropsStyles = _mergeAndSync2[0];\n          var newCurrentStyles = _mergeAndSync2[1];\n          var newCurrentVelocities = _mergeAndSync2[2];\n          var newLastIdealStyles = _mergeAndSync2[3];\n          var newLastIdealVelocities = _mergeAndSync2[4];\n\n          for (var i = 0; i < newMergedPropsStyles.length; i++) {\n            var newMergedPropsStyle = newMergedPropsStyles[i].style;\n            var newCurrentStyle = {};\n            var newCurrentVelocity = {};\n            var newLastIdealStyle = {};\n            var newLastIdealVelocity = {};\n\n            for (var key in newMergedPropsStyle) {\n              if (!Object.prototype.hasOwnProperty.call(newMergedPropsStyle, key)) {\n                continue;\n              }\n\n              var styleValue = newMergedPropsStyle[key];\n\n              if (typeof styleValue === 'number') {\n                newCurrentStyle[key] = styleValue;\n                newCurrentVelocity[key] = 0;\n                newLastIdealStyle[key] = styleValue;\n                newLastIdealVelocity[key] = 0;\n              } else {\n                var newLastIdealStyleValue = newLastIdealStyles[i][key];\n                var newLastIdealVelocityValue = newLastIdealVelocities[i][key];\n\n                for (var j = 0; j < framesToCatchUp; j++) {\n                  var _stepper = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);\n\n                  newLastIdealStyleValue = _stepper[0];\n                  newLastIdealVelocityValue = _stepper[1];\n                }\n\n                var _stepper2 = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);\n\n                var nextIdealX = _stepper2[0];\n                var nextIdealV = _stepper2[1];\n                newCurrentStyle[key] = newLastIdealStyleValue + (nextIdealX - newLastIdealStyleValue) * currentFrameCompletion;\n                newCurrentVelocity[key] = newLastIdealVelocityValue + (nextIdealV - newLastIdealVelocityValue) * currentFrameCompletion;\n                newLastIdealStyle[key] = newLastIdealStyleValue;\n                newLastIdealVelocity[key] = newLastIdealVelocityValue;\n              }\n            }\n\n            newLastIdealStyles[i] = newLastIdealStyle;\n            newLastIdealVelocities[i] = newLastIdealVelocity;\n            newCurrentStyles[i] = newCurrentStyle;\n            newCurrentVelocities[i] = newCurrentVelocity;\n          }\n\n          _this.animationID = null; // the amount we're looped over above\n\n          _this.accumulatedTime -= framesToCatchUp * msPerFrame;\n\n          _this.setState({\n            currentStyles: newCurrentStyles,\n            currentVelocities: newCurrentVelocities,\n            lastIdealStyles: newLastIdealStyles,\n            lastIdealVelocities: newLastIdealVelocities,\n            mergedPropsStyles: newMergedPropsStyles\n          });\n\n          _this.unreadPropStyles = null;\n\n          _this.startAnimationIfNecessary();\n        });\n      };\n\n      this.state = this.defaultState();\n    }\n\n    TransitionMotion.prototype.defaultState = function defaultState() {\n      var _props = this.props;\n      var defaultStyles = _props.defaultStyles;\n      var styles = _props.styles;\n      var willEnter = _props.willEnter;\n      var willLeave = _props.willLeave;\n      var didLeave = _props.didLeave;\n      var destStyles = typeof styles === 'function' ? styles(defaultStyles) : styles; // this is special. for the first time around, we don't have a comparison\n      // between last (no last) and current merged props. we'll compute last so:\n      // say default is {a, b} and styles (dest style) is {b, c}, we'll\n      // fabricate last as {a, b}\n\n      var oldMergedPropsStyles = undefined;\n\n      if (defaultStyles == null) {\n        oldMergedPropsStyles = destStyles;\n      } else {\n        oldMergedPropsStyles = defaultStyles.map(function (defaultStyleCell) {\n          // TODO: key search code\n          for (var i = 0; i < destStyles.length; i++) {\n            if (destStyles[i].key === defaultStyleCell.key) {\n              return destStyles[i];\n            }\n          }\n\n          return defaultStyleCell;\n        });\n      }\n\n      var oldCurrentStyles = defaultStyles == null ? destStyles.map(function (s) {\n        return _stripStyle2['default'](s.style);\n      }) : defaultStyles.map(function (s) {\n        return _stripStyle2['default'](s.style);\n      });\n      var oldCurrentVelocities = defaultStyles == null ? destStyles.map(function (s) {\n        return _mapToZero2['default'](s.style);\n      }) : defaultStyles.map(function (s) {\n        return _mapToZero2['default'](s.style);\n      });\n\n      var _mergeAndSync3 = mergeAndSync( // Because this is an old-style createReactClass component, Flow doesn't\n      // understand that the willEnter and willLeave props have default values\n      // and will always be present.\n      willEnter, willLeave, didLeave, oldMergedPropsStyles, destStyles, oldCurrentStyles, oldCurrentVelocities, oldCurrentStyles, // oldLastIdealStyles really\n      oldCurrentVelocities);\n\n      var mergedPropsStyles = _mergeAndSync3[0];\n      var currentStyles = _mergeAndSync3[1];\n      var currentVelocities = _mergeAndSync3[2];\n      var lastIdealStyles = _mergeAndSync3[3];\n      var lastIdealVelocities = _mergeAndSync3[4]; // oldLastIdealVelocities really\n\n      return {\n        currentStyles: currentStyles,\n        currentVelocities: currentVelocities,\n        lastIdealStyles: lastIdealStyles,\n        lastIdealVelocities: lastIdealVelocities,\n        mergedPropsStyles: mergedPropsStyles\n      };\n    }; // after checking for unreadPropStyles != null, we manually go set the\n    // non-interpolating values (those that are a number, without a spring\n    // config)\n\n\n    TransitionMotion.prototype.componentDidMount = function componentDidMount() {\n      this.prevTime = _performanceNow2['default']();\n      this.startAnimationIfNecessary();\n    };\n\n    TransitionMotion.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {\n      if (this.unreadPropStyles) {\n        // previous props haven't had the chance to be set yet; set them here\n        this.clearUnreadPropStyle(this.unreadPropStyles);\n      }\n\n      var styles = props.styles;\n\n      if (typeof styles === 'function') {\n        this.unreadPropStyles = styles(rehydrateStyles(this.state.mergedPropsStyles, this.unreadPropStyles, this.state.lastIdealStyles));\n      } else {\n        this.unreadPropStyles = styles;\n      }\n\n      if (this.animationID == null) {\n        this.prevTime = _performanceNow2['default']();\n        this.startAnimationIfNecessary();\n      }\n    };\n\n    TransitionMotion.prototype.componentWillUnmount = function componentWillUnmount() {\n      this.unmounting = true;\n\n      if (this.animationID != null) {\n        _raf2['default'].cancel(this.animationID);\n\n        this.animationID = null;\n      }\n    };\n\n    TransitionMotion.prototype.render = function render() {\n      var hydratedStyles = rehydrateStyles(this.state.mergedPropsStyles, this.unreadPropStyles, this.state.currentStyles);\n      var renderedChildren = this.props.children(hydratedStyles);\n      return renderedChildren && _react2['default'].Children.only(renderedChildren);\n    };\n\n    return TransitionMotion;\n  }(_react2['default'].Component);\n\n  exports['default'] = TransitionMotion;\n  module.exports = exports['default']; // list of styles, each containing interpolating values. Part of what's passed\n  // to children function. Notice that this is\n  // Array<ActualInterpolatingStyleObject>, without the wrapper that is {key: ...,\n  // data: ... style: ActualInterpolatingStyleObject}. Only mergedPropsStyles\n  // contains the key & data info (so that we only have a single source of truth\n  // for these, and to save space). Check the comment for `rehydrateStyles` to\n  // see how we regenerate the entirety of what's passed to children function\n  // the array that keeps track of currently rendered stuff! Including stuff\n  // that you've unmounted but that's still animating. This is where it lives\n  // it's possible that currentStyle's value is stale: if props is immediately\n  // changed from 0 to 400 to spring(0) again, the async currentStyle is still\n  // at 0 (didn't have time to tick and interpolate even once). If we naively\n  // compare currentStyle with destVal it'll be 0 === 0 (no animation, stop).\n  // In reality currentStyle should be 400\n});\nunwrapExports(TransitionMotion_1);\nvar presets = createCommonjsModule(function (module, exports) {\n  exports.__esModule = true;\n  exports[\"default\"] = {\n    noWobble: {\n      stiffness: 170,\n      damping: 26\n    },\n    // the default, if nothing provided\n    gentle: {\n      stiffness: 120,\n      damping: 14\n    },\n    wobbly: {\n      stiffness: 180,\n      damping: 12\n    },\n    stiff: {\n      stiffness: 210,\n      damping: 20\n    }\n  };\n  module.exports = exports[\"default\"];\n});\nunwrapExports(presets);\nvar spring_1 = createCommonjsModule(function (module, exports) {\n  exports.__esModule = true;\n\n  var _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  exports['default'] = spring;\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      'default': obj\n    };\n  }\n\n  var _presets2 = _interopRequireDefault(presets);\n\n  var defaultConfig = _extends({}, _presets2['default'].noWobble, {\n    precision: 0.01\n  });\n\n  function spring(val, config) {\n    return _extends({}, defaultConfig, config, {\n      val: val\n    });\n  }\n\n  module.exports = exports['default'];\n});\nunwrapExports(spring_1);\nvar reorderKeys_1 = createCommonjsModule(function (module, exports) {\n  exports.__esModule = true;\n  exports['default'] = reorderKeys;\n  var hasWarned = false;\n\n  function reorderKeys() {\n    if (process.env.NODE_ENV === 'development') {\n      if (!hasWarned) {\n        hasWarned = true;\n        console.error('`reorderKeys` has been removed, since it is no longer needed for TransitionMotion\\'s new styles array API.');\n      }\n    }\n  }\n\n  module.exports = exports['default'];\n});\nunwrapExports(reorderKeys_1);\nvar reactMotion = createCommonjsModule(function (module, exports) {\n  exports.__esModule = true;\n\n  function _interopRequire(obj) {\n    return obj && obj.__esModule ? obj['default'] : obj;\n  }\n\n  exports.Motion = _interopRequire(Motion_1);\n  exports.StaggeredMotion = _interopRequire(StaggeredMotion_1);\n  exports.TransitionMotion = _interopRequire(TransitionMotion_1);\n  exports.spring = _interopRequire(spring_1);\n  exports.presets = _interopRequire(presets);\n  exports.stripStyle = _interopRequire(stripStyle_1); // deprecated, dummy warning function\n\n  exports.reorderKeys = _interopRequire(reorderKeys_1);\n});\nunwrapExports(reactMotion);\nvar reactMotion_1 = reactMotion.Motion;\nvar reactMotion_2 = reactMotion.StaggeredMotion;\nvar reactMotion_3 = reactMotion.TransitionMotion;\nvar reactMotion_4 = reactMotion.spring;\nvar reactMotion_5 = reactMotion.presets;\nvar reactMotion_6 = reactMotion.stripStyle;\nvar reactMotion_7 = reactMotion.reorderKeys;\n\nvar classCallCheck = function classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar inherits = function inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar ScrollHorizontal = function (_Component) {\n  inherits(ScrollHorizontal, _Component);\n\n  function ScrollHorizontal(props) {\n    classCallCheck(this, ScrollHorizontal);\n\n    var _this = possibleConstructorReturn(this, (ScrollHorizontal.__proto__ || Object.getPrototypeOf(ScrollHorizontal)).call(this, props));\n\n    _this.componentDidUpdate = function (prevProps) {\n      if (prevProps.animValues !== _this.props.animValues) {\n        var currentAnimValues = _this.state.animValues;\n\n        _this.setState({\n          animValues: currentAnimValues + _this.props.animValues\n        }, _this.calculate());\n      } else {\n        _this.calculate();\n      }\n    };\n\n    _this.state = {\n      animValues: 0\n    };\n    _this.onScrollStart = _this.onScrollStart.bind(_this);\n    _this.resetMin = _this.resetMin.bind(_this);\n    _this.resetMax = _this.resetMax.bind(_this);\n    return _this;\n  }\n\n  createClass(ScrollHorizontal, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      // Place the 'lock__' class on the HTML element - if toggled\n      if (this.props.pageLock) {\n        var orig = document.firstElementChild.className;\n        document.firstElementChild.className = orig + (orig ? ' ' : '') + 'locked__';\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this.props.pageLock) {\n        document.firstElementChild.className = document.firstElementChild.className.replace(/ ?locked__/, '');\n      }\n    }\n  }, {\n    key: 'onScrollStart',\n    value: function onScrollStart(e) {\n      var _this2 = this;\n\n      e.preventDefault(); // If scrolling on x axis, change to y axis. Otherwise, just get the y deltas.\n      // (Basically, this for Apple mice that allow horizontal scrolling by default)\n\n      var rawData = e.deltaY ? e.deltaY : e.deltaX;\n      var mouseY = Math.floor(rawData); // Bring in the existing animation values\n\n      var animationValue = this.state.animValues;\n      var newAnimationValue = animationValue + mouseY;\n      var newAnimationValueNegative = animationValue - mouseY;\n\n      if (!this.caniscroll()) {\n        return;\n      }\n\n      var scrolling = function scrolling() {\n        _this2.props.reverseScroll ? _this2.setState({\n          animValues: newAnimationValueNegative\n        }) : _this2.setState({\n          animValues: newAnimationValue\n        });\n      }; // Begin Scrolling Animation\n\n\n      window.requestAnimationFrame(scrolling);\n    }\n  }, {\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      if (this.calculate.timer !== void 0 && this.props.children === nextProps.children && this.state.animValues === nextState.animValues && this.props.animValues === nextProps.animValues) {\n        return false;\n      }\n\n      if (this.props.children === nextProps.children && this.caniscroll() === false) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: 'caniscroll',\n    value: function caniscroll() {\n      var el = DOM.findDOMNode(this.hScrollParent);\n      var rect = el.getBoundingClientRect();\n      var scroller = el.firstElementChild;\n      return scroller.offsetLeft < rect.left || scroller.offsetLeft + scroller.offsetWidth > rect.width;\n    }\n  }, {\n    key: 'calculate',\n    value: function calculate() {\n      var _this3 = this; // Cancel the previous calculate\n\n\n      clearTimeout(this.calculate.timer); // Lazy to calculate, prevent max recurse call\n\n      this.calculate.timer = setTimeout(function () {\n        // Calculate the bounds of the scroll area\n        var el = DOM.findDOMNode(_this3.hScrollParent);\n        var max = el.lastElementChild.scrollWidth;\n        var win = el.offsetWidth; // Get the new animation values\n\n        var curr = _this3.state.animValues; // Establish the bounds. We do this every time b/c it might change.\n\n        var bounds = -(max - win); // Logic to hold everything in place\n\n        if (curr >= 1) {\n          _this3.resetMin();\n        } else if (curr <= bounds) {\n          var x = bounds + 1;\n\n          _this3.resetMax(x);\n        }\n      });\n    }\n  }, {\n    key: 'resetMin',\n    value: function resetMin() {\n      this.setState({\n        animValues: 0\n      });\n    }\n  }, {\n    key: 'resetMax',\n    value: function resetMax(x) {\n      this.setState({\n        animValues: x\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this4 = this;\n\n      var _props = this.props,\n          config = _props.config,\n          style = _props.style,\n          children = _props.children;\n      var width = style.width,\n          height = style.height;\n      var springConfig = config || reactMotion_5.noWobble; // Styles\n\n      var styles = _extends({\n        height: height || '100%',\n        width: width || '100%',\n        overflow: 'scroll',\n        overflowY: 'none',\n        position: 'relative'\n      }, style);\n\n      return React.createElement('div', {\n        onWheel: this.onScrollStart,\n        ref: function ref(r) {\n          _this4.hScrollParent = r;\n        },\n        style: styles,\n        className: 'scroll-horizontal ' + (this.props.className || '')\n      }, React.createElement(reactMotion_1, {\n        style: {\n          z: reactMotion_4(this.state.animValues, springConfig)\n        }\n      }, function (_ref) {\n        var z = _ref.z;\n        var scrollingElementStyles = {\n          transform: 'translate3d(' + z + 'px, 0,0)',\n          display: 'inline-flex',\n          height: '100%',\n          position: 'absolute',\n          willChange: 'transform'\n        };\n        return React.createElement('div', {\n          style: scrollingElementStyles\n        }, children);\n      }));\n    }\n  }]);\n  return ScrollHorizontal;\n}(Component);\n\nScrollHorizontal.propTypes = {\n  reverseScroll: PropTypes.bool,\n  pageLock: PropTypes.bool,\n  config: PropTypes.object,\n  style: PropTypes.object,\n  className: PropTypes.string,\n  children: PropTypes.array.isRequired,\n  animValues: PropTypes.number\n};\nScrollHorizontal.defaultProps = {\n  reverseScroll: false,\n  pageLock: false,\n  config: null,\n  style: {\n    width: '100%',\n    height: '100%'\n  },\n  className: null,\n  animValues: null\n};\nexport default ScrollHorizontal;","map":null,"metadata":{},"sourceType":"module"}